#pragma kernel buildVoxelGrid
#pragma kernel sampleCornerDensities
#pragma kernel calculateMinimizingVertices
#pragma kernel generateVertices
#pragma kernel generateIndices

#define MATERIAL_INDEX_VOID 0
#define MATERIAL_INDEX_MATERIAL1 1
#define MATERIAL_INDEX_MATERIAL2 2
#define MATERIAL_INDEX_MATERIAL3 4
#define MATERIAL_INDEX_MATERIAL4 8
#define MATERIAL_INDEX_MATERIAL5 16
#define MATERIAL_INDEX_MATERIAL6 32
#define MATERIAL_INDEX_MATERIAL7 64
#define MATERIAL_INDEX_MATERIAL8 128
#define MATERIAL_INDEX_MATERIAL9 256

struct Corner {
    float3 position;
    float  density;
    uint   materialIndex;
};

Corner createCorner( float3 position ) {
    Corner corner;

    corner.position      = position;
    corner.density       = 0.0f;
    corner.materialIndex = 0;

    return corner;
}

struct Edge {
    float3 intersection;
    float3 normal;
};

Edge createEdge( ) {
    Edge edge;

    edge.intersection = float3( 0.0f, 0.0f, 0.0f );
    edge.normal       = float3( 0.0f, 0.0f, 0.0f );

    return edge;
}

#define VOXEL_CORNER_COUNT 8
#define VOXEL_EDGE_COUNT 12

struct Voxel {
    float3 center;
    float3 size;
    float3 extents;
    float3 minimum;
    float3 maximum;
    float3 vertex;
    float3 normal;
    int    index;
};

Voxel createVoxel( float3 center, float3 size ) {
    Voxel voxel;

    voxel.center  = center;
    voxel.size    = size;
    voxel.extents = size / 2;
    voxel.minimum = center - voxel.extents;
    voxel.maximum = center + voxel.extents;
    voxel.vertex  = float3( 0.0f, 0.0f, 0.0f );
    voxel.normal  = float3( 0.0f, 0.0f, 0.0f );
    voxel.index   = -1;

    return voxel;
}

#define DENSITY_FUNCTION_TYPE_CUBOID 0
#define DENSITY_FUNCTION_TYPE_ELLIPSOID 1

#define DENSITY_FUNCTION_COMBINATION_UNION 0
#define DENSITY_FUNCTION_COMBINATION_INTERSECTION 1
#define DENSITY_FUNCTION_COMBINATION_SUBTRACTION 2

struct DensityFunction {
    uint   type;
    uint   combination;
    uint   materialIndex;
    float3 origin;
    float3 extents;
};

// element-wise multiply
float3 multiply( float3 v1, float3 v2 ) {
    return float3( v1.x * v2.x, v1.y * v2.y, v1.z * v2.z );
}

// element-wise divide
float3 divide( float3 v1, float3 v2 ) {
    return float3( v1.x / v2.x, v1.y / v2.y, v1.z / v2.z );
}

// element-wise absolute value
float3 absolute( float3 v ) {
    return float3( abs( v.x ), abs( v.y ), abs( v.z ) );
}

float3 maximum( float3 v1, float3 v2 ) {
    return float3( max( v1.x, v2.x ), max( v1.y, v2.x ), max( v1.z, v2.x ) );
}

float sampleCuboid( float3 position, in DensityFunction densityFunction ) {
    float3 q = absolute( position - densityFunction.origin ) - densityFunction.extents;
    return length( max( q, float3( 0.0f, 0.0f, 0.0f ) ) ) + min( max( q.x, max( q.y, q.z ) ), 0.0f );
}

float sampleEllipsoid( float3 position, in DensityFunction densityFunction ) {
    // avoid division by zero
    if( length( position - densityFunction.origin ) == 0.0f ) {
        return -1.0f;
    }

    float k0 = length( divide( ( position - densityFunction.origin ), densityFunction.extents ) );
    float k1 = length( divide( ( position - densityFunction.origin ), multiply( densityFunction.extents, densityFunction.extents ) ) );

    return k0 * ( k0 - 1.0f ) / k1;
}

float sampleDensityFunction( float3 position, in DensityFunction densityFunction ) {
    switch( densityFunction.type ) {
        case DENSITY_FUNCTION_TYPE_CUBOID:
            return sampleCuboid( position, densityFunction );
        case DENSITY_FUNCTION_TYPE_ELLIPSOID:
            return sampleEllipsoid( position, densityFunction );
        default:
            return 0.0f;
    }
}

#define INTERSECTION_APPROXIMATION_BINARY_SEARCH 0
#define INTERSECTION_APPROXIMATION_LINEAR_INTERPOLATION 1

cbuffer Configuration {
    uint resolution;
    uint minimizerIterations;
    uint binarySearchIterations;
    uint surfaceCorrectionIterations;
    uint intersectionApproximation;
    uint densityFunctionCount;
}

RWStructuredBuffer<Voxel>  voxels;
RWStructuredBuffer<Corner> corners;
RWStructuredBuffer<Edge>   edges;

[numthreads( 1, 1, 1 )]
void buildVoxelGrid( uint3 dispatchThreadID : SV_DispatchThreadID ) {
    uint voxelIndex = ( dispatchThreadID.z * resolution * resolution ) + ( dispatchThreadID.y * resolution ) + dispatchThreadID.x;

    float3 size   = float3( 1.0f, 1.0f, 1.0f ) / resolution;                                                // center voxel relative to 0, 0, 0
    float3 center = ( float3( dispatchThreadID.x, dispatchThreadID.y, dispatchThreadID.z ) / resolution ) - ( size / 2 * ( resolution - 1 ) );

    voxels[voxelIndex] = createVoxel( center, size );

    uint cornerIndex = ( voxelIndex * VOXEL_CORNER_COUNT );

    corners[cornerIndex + 0] = createCorner( voxels[voxelIndex].minimum );
    corners[cornerIndex + 1] = createCorner( float3( voxels[voxelIndex].maximum.x, voxels[voxelIndex].minimum.y, voxels[voxelIndex].minimum.z ) );
    corners[cornerIndex + 2] = createCorner( float3( voxels[voxelIndex].maximum.x, voxels[voxelIndex].minimum.y, voxels[voxelIndex].maximum.z ) );
    corners[cornerIndex + 3] = createCorner( float3( voxels[voxelIndex].minimum.x, voxels[voxelIndex].minimum.y, voxels[voxelIndex].maximum.z ) );
    corners[cornerIndex + 4] = createCorner( float3( voxels[voxelIndex].minimum.x, voxels[voxelIndex].maximum.y, voxels[voxelIndex].maximum.z ) );
    corners[cornerIndex + 5] = createCorner( float3( voxels[voxelIndex].minimum.x, voxels[voxelIndex].maximum.y, voxels[voxelIndex].minimum.z ) );
    corners[cornerIndex + 6] = createCorner( float3( voxels[voxelIndex].maximum.x, voxels[voxelIndex].maximum.y, voxels[voxelIndex].minimum.z ) );
    corners[cornerIndex + 7] = createCorner( voxels[voxelIndex].maximum );

    uint edgeIndex = ( voxelIndex * VOXEL_EDGE_COUNT );

    edges[edgeIndex +  0] = createEdge( );
    edges[edgeIndex +  1] = createEdge( );
    edges[edgeIndex +  2] = createEdge( );
    edges[edgeIndex +  3] = createEdge( );
    edges[edgeIndex +  4] = createEdge( );
    edges[edgeIndex +  5] = createEdge( );
    edges[edgeIndex +  6] = createEdge( );
    edges[edgeIndex +  7] = createEdge( );
    edges[edgeIndex +  8] = createEdge( );
    edges[edgeIndex +  9] = createEdge( );
    edges[edgeIndex + 10] = createEdge( );
    edges[edgeIndex + 11] = createEdge( );
}

RWStructuredBuffer<DensityFunction> densityFunctions;

[numthreads( 1, 1, 1 )]
void sampleCornerDensities( uint3 dispatchThreadID : SV_DispatchThreadID ) {
    uint voxelIndex = ( dispatchThreadID.z * resolution * resolution ) + ( dispatchThreadID.y * resolution ) + dispatchThreadID.x;

    [unroll]
    for( uint voxelCornerIndex = 0; voxelCornerIndex < VOXEL_CORNER_COUNT; ++voxelCornerIndex ) {

        uint cornerIndex = ( voxelIndex * VOXEL_CORNER_COUNT ) + voxelCornerIndex;

        for( uint densityFunctionIndex = 0; densityFunctionIndex < densityFunctionCount; ++densityFunctionIndex ) {

            float density       = sampleDensityFunction( corners[cornerIndex].position, densityFunctions[densityFunctionIndex] );
            uint  materialIndex = corners[cornerIndex].materialIndex;

            // set material bit if the corner is inside of the shape
            if( densityFunctions[densityFunctionIndex].combination == DENSITY_FUNCTION_COMBINATION_UNION && density < 0.0f ) {
                materialIndex |= densityFunctions[densityFunctionIndex].materialIndex;
            }
            // unset material bit if the corner is outside of the shape
            if( densityFunctions[densityFunctionIndex].combination == DENSITY_FUNCTION_COMBINATION_INTERSECTION && density > 0.0f ) {
                materialIndex &= ~densityFunctions[densityFunctionIndex].materialIndex;
            }
            // unset material bit if the corner is inside of the shape
            if( densityFunctions[densityFunctionIndex].combination == DENSITY_FUNCTION_COMBINATION_SUBTRACTION && density < 0.0f ) {
                materialIndex &= ~densityFunctions[densityFunctionIndex].materialIndex;
            }

            switch( densityFunctions[densityFunctionIndex].combination ) {
                case DENSITY_FUNCTION_COMBINATION_UNION:
                    density = min( corners[cornerIndex].density,  density );
                    break;
                case DENSITY_FUNCTION_COMBINATION_INTERSECTION:
                    density = max( corners[cornerIndex].density,  density );
                    break;
                case DENSITY_FUNCTION_COMBINATION_SUBTRACTION:
                    density = max( corners[cornerIndex].density, -density );
                    break;
            }

            corners[cornerIndex].density       = density;
            corners[cornerIndex].materialIndex = materialIndex;
        }
    }
}

#define NEGATIVE_INFINITY 3.402823466e-38F
#define POSITIVE_INFINITY 3.402823466e+38F

float calculateDensity( float3 position ) {

    float density = POSITIVE_INFINITY;

    for( uint densityFunctionIndex = 0; densityFunctionIndex < densityFunctionCount; ++densityFunctionIndex ) {

        switch( densityFunctions[densityFunctionIndex].combination ) {
            case DENSITY_FUNCTION_COMBINATION_UNION:
                density = min( density,  sampleDensityFunction( position, densityFunctions[densityFunctionIndex] ) );
                break;
            case DENSITY_FUNCTION_COMBINATION_INTERSECTION:
                density = max( density,  sampleDensityFunction( position, densityFunctions[densityFunctionIndex] ) );
                break;
            case DENSITY_FUNCTION_COMBINATION_SUBTRACTION:
                density = max( density, -sampleDensityFunction( position, densityFunctions[densityFunctionIndex] ) );
                break;
            default:
                density = 0.0f;
                break;
        }
    }

    return density;
}

float3 approximateIntersection( in Corner corner0, in Corner corner1 ) {
    if( corner0.density == 0.0f || corner1.density == 0.0f ) {
        // one of the corners is at the exact intersection
        return corner0.density == 0.0f ? corner0.position : corner1.position;
    }
    else if( intersectionApproximation == INTERSECTION_APPROXIMATION_BINARY_SEARCH ) {

        float3 start = float3( 0.0f, 0.0f, 0.0f );
        float3 end   = float3( 0.0f, 0.0f, 0.0f );
        if( corner0.density < corner1.density ) {
            start = corner0.position;
            end   = corner1.position;
        }
        else {
            start = corner1.position;
            end   = corner0.position;
        }

        float3 intersection = float3( 0.0f, 0.0f, 0.0f );
        for( uint binarySearchIteration = 0; binarySearchIteration < binarySearchIterations; ++binarySearchIteration ) {
            intersection = start + ( 0.5f * ( end - start ) );

            float density = calculateDensity( intersection );

            if( density < 0.0f ) {
                start = intersection;
            }
            else if( density > 0.0f ) {
                end = intersection;
            }
            else if( density == 0.0f ) {
                break;
            }
        }

        return intersection;
    }
    else if( intersectionApproximation == INTERSECTION_APPROXIMATION_LINEAR_INTERPOLATION ) {
        return corner0.position + ( ( -corner0.density ) * ( corner1.position - corner0.position ) / ( corner1.density - corner0.density ) );
    }
    return float3( 0.0f, 0.0f, 0.0f );
}

#define STEP 0.1f

float3 calculateNormal( float3 position ) {

    // sample surrounding x, y, z locations and take the difference

    float3 positive = float3( POSITIVE_INFINITY, POSITIVE_INFINITY, POSITIVE_INFINITY );

    positive.x = calculateDensity( position + float3( STEP, 0.0f, 0.0f ) );
    positive.y = calculateDensity( position + float3( 0.0f, STEP, 0.0f ) );
    positive.z = calculateDensity( position + float3( 0.0f, 0.0f, STEP ) );

    float3 negative = float3( POSITIVE_INFINITY, POSITIVE_INFINITY, POSITIVE_INFINITY );

    negative.x = calculateDensity( position - float3( STEP, 0.0f, 0.0f ) );
    negative.y = calculateDensity( position - float3( 0.0f, STEP, 0.0f ) );
    negative.z = calculateDensity( position - float3( 0.0f, 0.0f, STEP ) );

    return normalize( positive - negative );
}

#include "QEF.hlsl"

float3 surfaceCorrection( float3 vertex, float3 normal ) {
    for( uint surfaceCorrectionIteration = 0; surfaceCorrectionIteration < surfaceCorrectionIterations; ++surfaceCorrectionIteration ) {
        float density = calculateDensity( vertex );
        if( density == 0.0f ) {
            // vertex is at the surface
            break;
        }
        vertex -= normal * density;
    }
    return vertex;
}

static uint EDGE_LOOKUP[VOXEL_EDGE_COUNT][2] = {
    { 0, 1 },
    { 3, 2 },
    { 5, 6 },
    { 4, 7 },
    { 0, 5 },
    { 1, 6 },
    { 3, 4 },
    { 2, 7 },
    { 0, 3 },
    { 1, 2 },
    { 5, 4 },
    { 6, 7 }
};

[numthreads( 1, 1, 1 )]
void calculateMinimizingVertices( uint3 dispatchThreadID : SV_DispatchThreadID ) {
    uint voxelIndex = ( dispatchThreadID.z * resolution * resolution ) + ( dispatchThreadID.y * resolution ) + dispatchThreadID.x;

    uint cornerBits = 0;

    [unroll]
    for( uint voxelCornerIndex = 0; voxelCornerIndex < VOXEL_CORNER_COUNT; ++voxelCornerIndex ) {
        uint cornerIndex = ( voxelIndex * VOXEL_CORNER_COUNT ) + voxelCornerIndex;

        cornerBits |= corners[cornerIndex].materialIndex;
    }

    bool allEmpty = cornerBits == 0;   // no bits set
    bool allSolid = cornerBits == 255; // all bits set

    if( !( allEmpty && allSolid ) ) {

        SVDQEF qef           = createSVDQEF( );
        float3 averageNormal = float3( 0.0f, 0.0f, 0.0f );

        for( uint voxelEdgeIndex = 0; voxelEdgeIndex < VOXEL_EDGE_COUNT; ++voxelEdgeIndex ) {
            uint cornerIndex0 = ( voxelIndex * VOXEL_CORNER_COUNT ) + EDGE_LOOKUP[voxelEdgeIndex][0];
            uint cornerIndex1 = ( voxelIndex * VOXEL_CORNER_COUNT ) + EDGE_LOOKUP[voxelEdgeIndex][1];

            bool edgeIntersectsContour = (
                corners[cornerIndex0].materialIndex == MATERIAL_INDEX_VOID && corners[cornerIndex1].materialIndex >= MATERIAL_INDEX_MATERIAL1
            ) || (
                corners[cornerIndex1].materialIndex == MATERIAL_INDEX_VOID && corners[cornerIndex0].materialIndex >= MATERIAL_INDEX_MATERIAL1
            );

            if( edgeIntersectsContour ) {
                uint edgeIndex = ( voxelIndex * VOXEL_EDGE_COUNT ) + voxelEdgeIndex;

                edges[edgeIndex].intersection = approximateIntersection( corners[cornerIndex0], corners[cornerIndex1] );
                edges[edgeIndex].normal       = calculateNormal( edges[edgeIndex].intersection );

                addToQEF( qef, edges[edgeIndex].intersection, edges[edgeIndex].normal );

                averageNormal += edges[edgeIndex].normal;
            }
        }

        if( qef.intersectionCount > 0 ) {
            float3 vertex = float3( 0.0f, 0.0f, 0.0f );
            float  error  = 0.0f;

            solveQEF( qef, vertex, error, minimizerIterations );

            float3 normal = normalize( averageNormal / qef.intersectionCount );

            vertex = surfaceCorrection( vertex, normal );

            voxels[voxelIndex].vertex = vertex;
            voxels[voxelIndex].normal = normal;
        }

    }
}

struct Quad {
    uint indices[6];
    uint subMeshIndex;
};

Quad createQuad(
    uint indices[6],
    uint subMeshIndex
) {
    Quad quad;
    quad.indices[0]   = indices[0];
    quad.indices[1]   = indices[1];
    quad.indices[2]   = indices[2];
    quad.indices[3]   = indices[3];
    quad.indices[4]   = indices[4];
    quad.indices[5]   = indices[5];
    quad.subMeshIndex = subMeshIndex;
    return quad;
}

RWStructuredBuffer<float3> vertices;
RWStructuredBuffer<float3> normals;
RWStructuredBuffer<uint>   indexCounter;

[numthreads( 1, 1, 1 )]
void generateVertices( uint3 dispatchThreadID : SV_DispatchThreadID ) {
    uint voxelIndex = ( dispatchThreadID.z * resolution * resolution ) + ( dispatchThreadID.y * resolution ) + dispatchThreadID.x;

    if(
        voxels[voxelIndex].index == -1 &&
        ( length( voxels[voxelIndex].vertex ) > 0.0f && length( voxels[voxelIndex].normal ) > 0.0f )
    ) {
        uint index;
        InterlockedAdd( indexCounter[0], 1, index );

        voxels[voxelIndex].index = index;

        // generate vertex and normal
        vertices[index] = voxels[voxelIndex].vertex;
        normals[index]  = voxels[voxelIndex].normal;
    }
}

AppendStructuredBuffer<Quad> quads;

#define INT_BITS 32

uint findHighestMaterialBit( uint materialIndex ) {
    // return index of highest set bit in material index
    for( uint bitIndex = INT_BITS - 1; bitIndex >= 0; --bitIndex ) {
        if( ( materialIndex >> bitIndex ) > 0 ) {
            return bitIndex;
        }
    }

    return 0;
}

void contour( uint voxelIndices[4], uint voxelEdgeIndex ) {

    bool allHaveFeatures = true;

    [unroll]
    for( uint voxelIndexIndex = 0; voxelIndexIndex < 4; ++voxelIndexIndex ) {
        uint voxelIndex = voxelIndices[voxelIndexIndex];

        if( !( length( voxels[voxelIndex].vertex ) > 0.0f && length( voxels[voxelIndex].normal ) > 0.0f ) ) {
            allHaveFeatures = false;
            break;
        }
    }

    uint cornerIndex0 = ( voxelIndices[0] * VOXEL_CORNER_COUNT ) + EDGE_LOOKUP[voxelEdgeIndex][0];
    uint cornerIndex1 = ( voxelIndices[0] * VOXEL_CORNER_COUNT ) + EDGE_LOOKUP[voxelEdgeIndex][1];

    bool edgeIntersectsContour = (
        corners[cornerIndex0].materialIndex == MATERIAL_INDEX_VOID && corners[cornerIndex1].materialIndex >= MATERIAL_INDEX_MATERIAL1
    ) || (
        corners[cornerIndex1].materialIndex == MATERIAL_INDEX_VOID && corners[cornerIndex0].materialIndex >= MATERIAL_INDEX_MATERIAL1
    );

    if( allHaveFeatures && edgeIntersectsContour ) {

        uint materialIndex = corners[cornerIndex0].materialIndex == MATERIAL_INDEX_VOID
            ? corners[cornerIndex1].materialIndex
            : corners[cornerIndex0].materialIndex;

        uint indices[6];

        // ensure quad is indexed facing outward
        if( corners[cornerIndex0].materialIndex == MATERIAL_INDEX_VOID ) {
            indices[0] = voxels[voxelIndices[0]].index;
            indices[1] = voxels[voxelIndices[1]].index;
            indices[2] = voxels[voxelIndices[2]].index;
            indices[3] = voxels[voxelIndices[3]].index;
            indices[4] = voxels[voxelIndices[2]].index;
            indices[5] = voxels[voxelIndices[1]].index;
        }
        else {
            indices[0] = voxels[voxelIndices[1]].index;
            indices[1] = voxels[voxelIndices[2]].index;
            indices[2] = voxels[voxelIndices[3]].index;
            indices[3] = voxels[voxelIndices[2]].index;
            indices[4] = voxels[voxelIndices[1]].index;
            indices[5] = voxels[voxelIndices[0]].index;
        }

        uint subMeshIndex = findHighestMaterialBit( materialIndex );

        quads.Append( createQuad( indices, subMeshIndex ) );
    }

}

uint index( uint x, uint y, uint z ) {
    return ( z * resolution * resolution ) + ( y * resolution ) + x;
}

[numthreads( 1, 1, 1 )]
void generateIndices( uint3 dispatchThreadID : SV_DispatchThreadID ) {
    uint x = dispatchThreadID.x;
    uint y = dispatchThreadID.y;
    uint z = dispatchThreadID.z;

    // on every positive axis, generate indices using 4 voxel surrounding a common edge

    // x axis
    if( y + 1 < resolution && z + 1 < resolution ) {
        uint voxelIndices[4] = {
            index( x, y,     z     ),
            index( x, y,     z + 1 ),
            index( x, y + 1, z     ),
            index( x, y + 1, z + 1 )
        };
        contour( voxelIndices, 3 );
    }

    // y axis
    if( x + 1 < resolution && z + 1 < resolution ) {
        uint voxelIndices[4] = {
            index( x,     y, z     ),
            index( x + 1, y, z     ),
            index( x,     y, z + 1 ),
            index( x + 1, y, z + 1 )
        };
        contour( voxelIndices, 7 );
    }

    // z axis
    if( x + 1 < resolution && y + 1 < resolution ) {
        uint voxelIndices[4] = {
            index( x,     y,     z ),
            index( x,     y + 1, z ),
            index( x + 1, y,     z ),
            index( x + 1, y + 1, z )
        };
        contour( voxelIndices, 11 );
    }

}